<?xml version='1.0' encoding='utf-8'?>
<Item TextType="CompleteItem" SchemaVersion="2.0" id="X_xxx_b0_p1_zzz" Template="Generic_A4_Unnumbered" Rendering="VLE2 staff (learn3)" DiscussionAlias="Comment" vleglossary="manual">
  <meta content="XXX Block 0, Part 1: Introduction"/>
  <CourseCode>XXX</CourseCode>
  <CourseTitle>YYY</CourseTitle>
  <ItemID/>
  <ItemTitle>XXX Block 0, Part 1: Introduction</ItemTitle>
  <FrontMatter>
  <ByLine>Tony Hirst</ByLine>
  <Imprint>
    <Standard>
      <GeneralInfo>
        <Paragraph>This publication forms part of the Open University module XXX YYY. [The complete list of texts which make up this module can be found at the back (where applicable)]. Details of this and other Open University modules can be obtained from the Student Registration and Enquiry Service, The Open University, PO Box 197, Milton Keynes MK7 6BJ, United Kingdom (tel. +44 (0)845 300 60 90; email general-enquiries@open.ac.uk).</Paragraph>
        <Paragraph>Alternatively, you may visit the Open University website at www.open.ac.uk where you can learn more about the wide range of modules and packs offered at all levels by The Open University.</Paragraph>
        <Paragraph>To purchase a selection of Open University materials visit www.ouw.co.uk, or contact Open University Worldwide, Walton Hall, Milton Keynes MK7 6AA, United Kingdom for a brochure (tel. +44 (0)1908 858793; fax +44 (0)1908 858787; email ouw-customer-services@open.ac.uk).</Paragraph>
      </GeneralInfo>
      <Address>
        <AddressLine>The Open University,</AddressLine>
        <AddressLine>Walton Hall, Milton Keynes</AddressLine>
        <AddressLine>MK7 6AA</AddressLine>
      </Address>
      <FirstPublished>
        <Paragraph>First published YYYY</Paragraph>
      </FirstPublished>
      <Copyright>
        <Paragraph>Unless otherwise stated, copyright Â© 2023 The Open University, all rights reserved.</Paragraph>
      </Copyright>
      <Rights>
        <Paragraph>All rights reserved. No part of this publication may be reproduced, stored in a retrieval system, transmitted or utilised in any form or by any means, electronic, mechanical, photocopying, recording or otherwise, without written permission from the publisher or a licence from the Copyright Licensing Agency Ltd. Details of such licences (for reprographic reproduction) may be obtained from the Copyright Licensing Agency Ltd, Saffron House, 6-10 Kirby Street, London EC1N 8TS (website www.cla.co.uk).</Paragraph>
        <Paragraph>Open University materials may also be made available in electronic formats for use by students of the University. All rights, including copyright and related rights and database rights, in electronic materials and their contents are owned by or licensed to The Open University, or otherwise used by The Open University as permitted by applicable law.</Paragraph>
        <Paragraph>In using electronic materials and their contents you agree that your use will be solely for the purposes of following an Open University course of study or otherwise as licensed by The Open University or its assigns.</Paragraph>
        <Paragraph>Except as permitted above you undertake not to copy, store in any medium (including electronic storage or use in a website), distribute, transmit or retransmit, broadcast, modify or show in public such electronic materials in whole or in part without the prior written consent of The Open University or in accordance with the Copyright, Designs and Patents Act 1988.</Paragraph>
      </Rights>
      <Edited>
        <Paragraph>Edited and designed by The Open University.</Paragraph>
      </Edited>
      <Typeset>
        <Paragraph>Typeset by The Open University</Paragraph>
      </Typeset>
      <Printed>
        <Paragraph>Printed and bound in the United Kingdom by [name and address of the printer].</Paragraph>
        <Paragraph/>
      </Printed>
      <ISBN>None</ISBN>
      <Edition>None</Edition>
    </Standard>
  </Imprint>
</FrontMatter>
  <Unit>
    <UnitID>Block 0: QQQQ</UnitID>
    <UnitTitle>Reusable workflow: Introduction</UnitTitle>
    <ByLine>Tony Hirst</ByLine>
    <Session id="introduction">
        <Title>1 Introduction</Title>
        <Paragraph>Writing software guides to support educational modules adds authoring, editing and testing overheads to module production. If multiple modules use similar environments or software applications, reusing generic or customisable materials provides a way or reducing those overheads.</Paragraph>
        <Paragraph>This informal report describes the production route for a customisable software guide to support the use of virtual computing environments (VCEs) across several modules.</Paragraph>
        <Paragraph>The VCEs are accessed as a remotely hosted environment provided by the Open University <i>Compute Home</i> service, or as a locally run Docker container. <i>The same Docker image should ideally be used to support both the hosted and locally run environment.</i></Paragraph>
        <Paragraph>A common production route for the software guides required for three separate modules was explored:</Paragraph>
        <BulletedList>
            <ListItem>
                <Paragraph><a href="https://www.open.ac.uk/courses/modules/m348"><i>M348 Applied statistical modelling</i></a>, which provides a classic Jupyter notebook environment running an R kernel;</Paragraph>
            </ListItem>
            <ListItem>
                <Paragraph><a href="https://www.open.ac.uk/courses/modules/tm129"><i>TM129 Technologies in practice (Robotics block)</i></a>, which provides a classic Jupyter notebook environment running an Python kernel and a simple notebook based robot simulation environment;</Paragraph>
            </ListItem>
            <ListItem>
                <Paragraph><a href="https://www.open.ac.uk/courses/modules/tm351"><i>TM351 Data management and analysis</i></a>, which provides a JupyterLab environment running a Python kernel, PostgreSQL and MongoDB database services, and the OpenRefine data-cleaning application.</Paragraph>
            </ListItem>
        </BulletedList>
        <Paragraph>The main aims were:</Paragraph>
        <BulletedList>
            <ListItem>
                <Paragraph>to maximise the amount of directly reusable content;</Paragraph>
            </ListItem>
            <ListItem>
                <Paragraph>to explore the use of reusable customisable content;</Paragraph>
            </ListItem>
            <ListItem>
                <Paragraph>to explore ways of integrating module specific content.</Paragraph>
            </ListItem>
        </BulletedList>
        <Paragraph>In addition, the work demonstrated a markdown-based authoring route with an automated conversion process capable of producing output assets in various formats (OU-XML (for use in OU production workflows: VLE rendering, PDF creation); HTML book format; simple PDF preview). The use of several tools to support quality processes (markdown linting, spellchecking, OU-XML validation) were also explored.</Paragraph>
        <Paragraph>The source repository for the source content can be found here: <a href="https://github.com/innovationOUtside/vce-generic-guide">innovationOUtside/vce-generic-guide</a>.</Paragraph>
        <Paragraph><i><b>Acknowledgements</b>: thanks to Karen Vines for helping iterate the text, Edith Francis for helping iterate the OU-XML, and Mark Hall for the original markdown2ou-xml converter.</i></Paragraph>
    </Session>
    <Session id="markdown-authoring-route">
        <Title>2 Markdown authoring route</Title>
        <Paragraph>The reusable content workflow is based on a markdown authoring route.</Paragraph>
        <Paragraph>Markdown is a simple text based markup language that can be edited in simple text editor. Markdown is typically rendered or previewed as rendered HTML. Markdown editors that support WYSIWYG user interfaces are also available. Various flavours of markdown are available that extend the core markdown language with more expressive semantics.</Paragraph>
        <Paragraph>A variety of publishing tools and frameworks are available that can render markdown source documents to a wide range of output document formats, including HTML, PDF, ebook and XML formats.</Paragraph>
        <Paragraph>As well as rendering rich text, markdown publishing extensions can also be used to render diagrams. For example, flowcharts can be rendered from simple text-based <ComputerCode>Mermaid.js</ComputerCode> scripts.</Paragraph>
        <Figure>
            <Image src="xxx_b0_p1_zzz_fig0.png"/><Caption>Figure 2.1 Publishing workflows from MyST markdown</Caption>
        </Figure>
        <Paragraph>Example publishing tools and frameworks for working with markdown include:</Paragraph>
        <BulletedList>
            <ListItem>
                <Paragraph><a href="https://pandoc.org/"><ComputerCode>pandoc</ComputerCode></a>: a low level computation tool for converting between different document formats;</Paragraph>
            </ListItem>
            <ListItem>
                <Paragraph><a href="https://www.sphinx-doc.org/en/master/">Sphinx</a>: originally developed to support the publication of software documentation, but is now widely used for more general forms of publishing;</Paragraph>
            </ListItem>
            <ListItem>
                <Paragraph><a href="https://jupyterbook.org/en/stable/intro.html">Jupyter Book</a>: publishing system built on top of Sphinx that supports the publication of content generated in whole or part from computational documents, (documents that include executable code whose outputs maybe be included in the output document); source documents include markdown and Jupyter notebooks; uses MyST flavoured markdown.</Paragraph>
            </ListItem>
            <ListItem>
                <Paragraph><a href="https://quarto.org/docs/authoring/markdown-basics.html">Quarto</a>: scientific document publishing system; source documents include markdown as well as computational documents such as Jupyter notebooks and Quarto flavoured  markdown (<ComputerCode>.qmd</ComputerCode>).</Paragraph>
            </ListItem>
        </BulletedList>
        <Box>
            <Heading>MyST markdown sandbox</Heading>
            <Paragraph>You can try out the MyST markdown sandbox editor <a href="https://mystmd.org/sandbox">here</a>.</Paragraph>
            <Figure>
                <Image src="xxx_b0_p1_zzz_fig1.png"/>
                <Caption>Figure 2.2 Screenshot of MyST sandbox editor with live preview.</Caption>
            </Figure>
        </Box>
        <Paragraph>See TO DO  for guidance on how to launch a preconfigured development environment within which you can try out the workflow described in this document.</Paragraph>
        <InternalSection id="ou-xml-production-workflow-using-jupyter-book">
            <Heading>OU-XML production workflow using Jupyter Book</Heading>
            <Paragraph>An increasing number of OU modules that require students to work with executable computer code are starting to use Jupyter notebooks to provide students with an interactive learning environment that blends rich content with embedded executable code and rendered code outputs (Figure 2.3).</Paragraph>
            <Figure>
                <Image src="xxx_b0_p1_zzz_fig2.png"/>
                <Caption>Figure 2.3 Screenshot of Jupyter notebook.</Caption>
            </Figure>
            <Paragraph>To support as general a workflow as a possible, the workflow adopted builds on the Jupyter Book publishing system. This supports:</Paragraph>
            <BulletedList>
                <ListItem>
                    <Paragraph>rich markdown (MyST syntax);</Paragraph>
                </ListItem>
                <ListItem>
                    <Paragraph>markdown and/or Jupyter notebook source documents;</Paragraph>
                </ListItem>
                <ListItem>
                    <Paragraph>executable content (via <ComputerCode>jupyter-server</ComputerCode>);</Paragraph>
                </ListItem>
                <ListItem>
                    <Paragraph>conversion to OU-XML via <ComputerCode>ou-book-theme</ComputerCode>.</Paragraph>
                </ListItem>
            </BulletedList>
            <Paragraph>The workflow proceeds as follows:</Paragraph>
            <BulletedList>
                <ListItem>
                    <Paragraph>source content authored in one or more markdown files; a tables of contents file (<ComputerCode>_toc.yml</ComputerCode>) identifies the source files and the orfer in which they are presented;</Paragraph>
                </ListItem>
                <ListItem>
                    <Paragraph>source content converted to output formats including Sphinx-XML by Sphinx;</Paragraph>
                </ListItem>
                <ListItem>
                    <Paragraph>Sphinx-XML converted to OU-XML.</Paragraph>
                </ListItem>
            </BulletedList>
            <InternalSection id="defining-the-table-of-contents-toc-yml">
                <Heading>Defining the table of contents (<ComputerCode>_toc.yml</ComputerCode>)</Heading>
                <Paragraph>The table of contents file can be used to define the contents of one of more OU-XML documents, where each part in the <ComputerCode>_toc.yml</ComputerCode> file defines a structured content <ComputerCode>&lt;Item&gt;</ComputerCode>.</Paragraph>
                <ProgramListing><Paragraph>format: jb-book</Paragraph><Paragraph>root: _copyright_notice</Paragraph><Paragraph>parts:</Paragraph><Paragraph>  - caption: First item name</Paragraph><Paragraph>    numbered: true</Paragraph><Paragraph>    chapters:</Paragraph><Paragraph>      - file: introduction</Paragraph><Paragraph>      - file: first_section</Paragraph><Paragraph>      - file: another_section</Paragraph><Paragraph>      - file: conclusion</Paragraph><Paragraph>  - caption: Second item name</Paragraph><Paragraph>    numbered: true</Paragraph><Paragraph>    chapters:</Paragraph><Paragraph>      - file: introduction2</Paragraph><Paragraph>      - file: only_section</Paragraph><Paragraph>      - file: conclusion2</Paragraph></ProgramListing>
                <Paragraph>If no file suffix is provided for the filename, the build process will look for files with the markdown (<ComputerCode>.md</ComputerCode>) or Jupyter notebook (<ComputerCode>.ipynb</ComputerCode>) file suffix.</Paragraph>
                <Paragraph>Typically, each file will define a single <ComputerCode>&lt;Session&gt;</ComputerCode> in the corresponding <ComputerCode>&lt;Item&gt;</ComputerCode>. Each file should start with a level 1 heading; lower level headings within each file trigger the creation of an <ComputerCode>&lt;InternalSection&gt;</ComputerCode> at that point. The  <ComputerCode>&lt;InternalSection&gt;</ComputerCode> blocks may be nested in line with ever subordinate heading levels.</Paragraph>
                <Paragraph>Internal <ComputerCode>&lt;CrossRef&gt;</ComputerCode> links may be generated within each part by referencing the file name and an identifier derived the linked to (sub)heading.</Paragraph>
            </InternalSection>
        </InternalSection>
    </Session>
    <Session id="authoring-reusable-content">
        <Title>3 Authoring reusable content</Title>
        <Paragraph>To start the authoring process, a legacy software guide available as an OU-XML structured content document was rendered to simple markdown.</Paragraph>
        <Paragraph>Sphinx style configration and table of contents scripts were created to so that the content could be previewed in an HTML book style format, or rendered back to OU-XML.</Paragraph>
        <Paragraph>Several features of Sphinx style publishing that support extensibility and reuse were adopted that allowed us to trade-off purely generic content, customisable content, and bespoke content for each module.</Paragraph>
        <InternalSection id="table-of-contents-conifiguration-files">
            <Heading>Table of Contents Conifiguration Files</Heading>
            <Paragraph>From a set of content files, one of the easist ways of defining which content files are to be used to generate a particular output document is to specify the files that are to be included via a table of contents file.</Paragraph>
            <Paragraph>In current production workflows, it would not be unusual for each module team author to their own software guide. In a markdown workflow, this might include each module team authoring several separate markdown documents, many of which may  duplicate similar instructional intent, and then create their own table of contents files to use their authored documents.</Paragraph>
            <Paragraph>One obvious way of reusing content across several modules would be for each module to use exactly the same guide, where the same table of contents file pulls from the same source documents.</Paragraph>
            <Paragraph>Partial customisation might be supported by each module team writing their own introduction, for example, but reusing all the other sections of the guide.  The output document is then defined using a module specific table of contents file that pulls in the module specific content (for example, from the file <ComputerCode>introduction-XY123.md</ComputerCode>) as well as a the generic reusable content files.</Paragraph>
            <Paragraph>When writing this sort of content, we must try to avoid making any references to a particular module. Where references to a module code are required, one possible approach is to use a generic code (for example <ComputerCode>XY123</ComputerCode>, or <ComputerCode>XXNNN</ComputerCode>) and then tell a student to use apply their particular module code in place of the generic code.</Paragraph>
            <Paragraph>For example, two modules might reuse content from a set of common files, as well as featuring module specific content, using the following table of cotnents files:</Paragraph>
            <ProgramListing><Paragraph>format: jb-book</Paragraph><Paragraph>root: g-vce_cribsheet</Paragraph><Paragraph>chapters:</Paragraph><Paragraph>  - file: g-introduction-m348</Paragraph><Paragraph>  - file: g-compute_home</Paragraph><Paragraph>  - file: g-local_vce_quickstart</Paragraph></ProgramListing>
            <ProgramListing><Paragraph>format: jb-book</Paragraph><Paragraph>root: g-vce_cribsheet</Paragraph><Paragraph>chapters:</Paragraph><Paragraph>  - file: g-introduction-tm351</Paragraph><Paragraph>  - file: g-compute_home</Paragraph><Paragraph>  - file: g-local_vce_quickstart</Paragraph></ProgramListing>
        </InternalSection>
        <InternalSection id="transcluding-embedding-content">
            <Heading>Transcluding / Embedding content</Heading>
            <Paragraph>One of the nice features of the Sphinx publishing workflow is that content files can import content from other content files. This allows us to define âpartialâ files that might include the content of just a single paragraph, for example.</Paragraph>
            <Paragraph>A module specific file can then be defined that includes module specific text (either imported from a partial content file or explicitly provided inline within the file) as well as generic text imported from a reusable partial content file.</Paragraph>
            <Paragraph>For example, the following markdown fragment shows how we might customise a module specific introduction file by first loading in generic content from a reusable file, and then appending some module specific content.</Paragraph>
            <ProgramListing><Paragraph>```{include} ./g-introduction-core.md</Paragraph><Paragraph></Paragraph><Paragraph>Finally, we have a conclusion paragraph that speaks to a particular module.</Paragraph></ProgramListing>
        </InternalSection>
        <InternalSection id="parameterised-customisable-content">
            <Heading>Parameterised Customisable Content</Heading>
            <Paragraph>In many cases, whilst the content is predomninantly reusable, there may be a requirement to customise it for use in particular module by referring to the module code or module name.</Paragraph>
            <Paragraph>In this case, rather than generate a custom file for each module, we can simply parameterise the module code, module name, etc., and then define a module configration file that sets a genric module name placeholder label, for example, to a required module name.</Paragraph>
            <Paragraph>For example, the following raw markdown fragment shows how we can use parameterised values at the start of a generic, customisable âcribsheetâ document.</Paragraph>
            <ProgramListing><Paragraph># Virtual Computing Environment Cribsheet ({{module_code}}, {{presentation_code}} Presentation)</Paragraph><Paragraph></Paragraph><Paragraph>## VCE Cribsheet</Paragraph><Paragraph></Paragraph><Paragraph>- Module code: {{module_code}}</Paragraph><Paragraph>- Presentation code: {{presentation_code}}</Paragraph></ProgramListing>
            <Paragraph>The configuration file allows the definition of variables as well as some limited processing of those variables (for example, casting to upper or lower case) as part of further configuration elements.</Paragraph>
            <ProgramListing><Paragraph>myst_substitutions:</Paragraph><Paragraph>    MCODE: M348</Paragraph><Paragraph>    NCODE: "348"</Paragraph><Paragraph>    MNAME: "Applied Statistical Modelling"</Paragraph><Paragraph>    PCODE: 23J</Paragraph><Paragraph>    YEAR: "2023"</Paragraph><Paragraph>    jupyter_help_forum: "'Jupyter notebooks' forum"</Paragraph><Paragraph></Paragraph><Paragraph>    # DEFAULT VALUES / RULES</Paragraph><Paragraph>    module_code: "{{'`' + MCODE|upper + '`'}}"</Paragraph><Paragraph>    presentation_code: "{{'`' + PCODE|upper + '`'}}"</Paragraph></ProgramListing>
        </InternalSection>
    </Session>
    <Session id="markdown-format">
        <Title>4 Markdown format</Title>
        <Paragraph>The MyST markdown format supports a range of mark-up devices that can be mapped naturally onto OU-XML tags. The format can also be extended to support the parsing, rendering and conversion of additional, custom defined tags.</Paragraph>
        <InternalSection id="from-markdown-to-ou-xml">
            <Heading>From markdown to OU-XML</Heading>
            <Paragraph>The range of MyST markdown elements that currently map on to OU-XML tags include:</Paragraph>
            <InternalSection id="headings">
                <Heading>Headings</Heading>
                <Paragraph>Use standard markdown heading levels (one or more <ComputerCode>#</ComputerCode> characters at start a line, followed by whistespace and then the header. The number of <ComputerCode>#</ComputerCode> characters specifes the heading level).</Paragraph>
                <Paragraph>Each included file represents a session and should start with a first level heading. Interior headings within the file (second level, third level, etc.) are associated with increasingly nested <ComputerCode>&lt;InternalSection&gt;</ComputerCode> tags, with the heading mapped to the <ComputerCode>&lt;Title&gt;</ComputerCode> tag at the start of the section.</Paragraph>
                <Paragraph>If the <ComputerCode>sphinx.config.myst_heading_anchors</ComputerCode> is set in the <ComputerCode>_config.yml</ComputerCode> file, identifiers are associated with each <ComputerCode>&lt;Session&gt;</ComputerCode> and <ComputerCode>&lt;InternalSection&gt;</ComputerCode> to the specified depth based on decasing the heading, removing punctuation and replace spaces with a <ComputerCode>-</ComputerCode>. Any generated section or subsection numbering is ignored.</Paragraph>
                <Paragraph>For example, <ComputerCode>## Second level heading</ComputerCode> would map to:</Paragraph>
                <ProgramListing><Paragraph>&amp;lt;Session id="introduction"&amp;gt;</Paragraph><Paragraph>    &amp;lt;Title&amp;gt;1 Introduction&amp;lt;/Title&amp;gt;</Paragraph><Paragraph>    ...</Paragraph><Paragraph>    &amp;lt;InternalSection id="second-level-heading"&amp;gt;</Paragraph><Paragraph>        &amp;lt;Heading&amp;gt;Second level heading&amp;lt;/Heading&amp;gt;</Paragraph><Paragraph>    ...</Paragraph></ProgramListing>
                <Paragraph>Note that section headings need to be unique within a <ComputerCode>&lt;Session&gt;</ComputerCode> if they are to be resolved as cross-referenced sections.</Paragraph>
            </InternalSection>
            <InternalSection id="cross-references">
                <Heading>Cross-references</Heading>
                <Paragraph>Cross-references may be made to section or internal section headers in the same file / session, or to other files / sessions in the same item by means of the session or internal section identifier.</Paragraph>
            </InternalSection>
            <InternalSection id="figure-elements">
                <Heading>Figure elements</Heading>
                <Paragraph>Figure elements should be defined in markdown as follows:</Paragraph>
                <ProgramListing><Paragraph></Paragraph><Paragraph>```{figure} assets_path/images_path/image_file.png</Paragraph><Paragraph>:name: unique_image_reference</Paragraph><Paragraph></Paragraph><Paragraph>Caption text</Paragraph><Paragraph></Paragraph><Paragraph>Optional description text for the image. Possibly several sentences.</Paragraph><Paragraph></Paragraph><Paragraph>```</Paragraph></ProgramListing>
                <Paragraph>This then maps onto the following OU-XML:</Paragraph>
                <ProgramListing><Paragraph>&amp;lt;Figure&amp;gt;</Paragraph><Paragraph>    &amp;lt;Image src="https://generated.url/path/image_file.png"/&amp;gt;</Paragraph><Paragraph>        &amp;lt;Caption&amp;gt;Figure N.M Caption text&amp;lt;/Caption&amp;gt;</Paragraph><Paragraph>            &amp;lt;Description&amp;gt;</Paragraph><Paragraph>                &amp;lt;Paragraph&amp;gt;Optional description text for the image. Possibly several sentences.&amp;lt;/Paragraph&amp;gt;</Paragraph><Paragraph>            &amp;lt;/Description&amp;gt;</Paragraph><Paragraph>&amp;lt;/Figure&amp;gt;</Paragraph></ProgramListing>
                <Paragraph>Several settings in the <ComputerCode>_config.txt</ComputerCode> determine how references to the figure are generated:</Paragraph>
                <ProgramListing><Paragraph>sphinx:</Paragraph><Paragraph>    config:</Paragraph><Paragraph>        numfig: true</Paragraph><Paragraph>        numfig_format: {'figure':'Figure %s'}</Paragraph><Paragraph>        numfig_secnum_depth: 1 #eg 0:1 1:2.1</Paragraph></ProgramListing>
                <Paragraph>The <ComputerCode>numfig</ComputerCode> parameter determines whether numeric references to figures may be generated; the <ComputerCode>numfig_format</ComputerCode> parameter specifies the format of the numeric reference text when a reference is generate; and the <ComputerCode>numfig_secnum_depth</ComputerCode> identifies the numbering level (incremental figure count across the item (<ComputerCode>0</ComputerCode>) or section number and figure number within section (<ComputerCode>1</ComputerCode>)).</Paragraph>
                <Paragraph>Links to figures can be described in the text via the unique reference, and either the caption text (<ComputerCode>{ref}`unique_image_reference`)</ComputerCode>) or, if enabled, the generated numeric reference (<ComputerCode>{numref}`g-other_file_in_item.md#unique_image_reference` </ComputerCode>) may be displayed.</Paragraph>
                <Paragraph>If the reference is to a figure in a separate file, the path to the source dilename should also be specified (for example, <ComputerCode>{numref}`unique_image_reference` </ComputerCode> or <ComputerCode>{ref}`other_file_in_item.md#unique_image_reference` </ComputerCode>).</Paragraph>
                <Paragraph>The path to the image assets should be set in the <ComputerCode>_config.yml</ComputerCode> file and the image assets copied to that location.</Paragraph>
                <ProgramListing><Paragraph>ou:</Paragraph><Paragraph>  image_path_prefix: https://generated.url/path</Paragraph><Paragraph>  # For example:</Paragraph><Paragraph>  # image_path_prefix: https://openuniv.sharepoint.com/sites/mmodules/m348/lmimages/</Paragraph><Paragraph> </Paragraph></ProgramListing>
            </InternalSection>
            <InternalSection id="component-numbering">
                <Heading>Component numbering</Heading>
                <Paragraph>Automatic numbering may be enabled via the <ComputerCode>_toc.yml</ComputerCode> file.</Paragraph>
            </InternalSection>
        </InternalSection>
        <InternalSection id="extending-the-markup-language">
            <Heading>Extending the markup language</Heading>
            <Paragraph>The MyST markdown format and the Sphinx publishing framework are both extensible, which means that it is possible to define additional tags to support the creation of bespoke materials.</Paragraph>
            <Paragraph>For example, the publishing workflow has been exteneded to support:</Paragraph>
            <BulletedList>
                <ListItem>
                    <Paragraph>the parsing and rendering of <ComputerCode>mermaid.js</ComputerCode> diagram syntax;</Paragraph>
                </ListItem>
                <ListItem>
                    <Paragraph>the parsing and custom rendering of âactivitiesâ with revealable answers.</Paragraph>
                </ListItem>
            </BulletedList>
            <InternalSection id="rendering-mermaid-js-diagrams">
                <Heading>Rendering <ComputerCode>mermaid.js</ComputerCode> diagrams</Heading>
                <Paragraph>The <ComputerCode>mermaid,js</ComputerCode> package is a widely used Javascript that package TO DO</Paragraph>
            </InternalSection>
            <InternalSection id="supporting-activity-elements">
                <Heading>Supporting activity elements</Heading>
                <Paragraph>The OU-XML structured content format supports the definition of âactivitiesâ according to the following structure:</Paragraph>
            </InternalSection>
        </InternalSection>
    </Session>
    <Session id="maths">
        <Title>5 Maths</Title>
        <Paragraph>Mathematical equations written using LaTeX syntac can be specified inline or as a block level equation.</Paragraph>
        <Paragraph>For example, the inline equation <InlineEquation><TeX>e=mc^2</TeX></InlineEquation> is specified in mardown using the <ComputerCode>{math}</ComputerCode> role: <ComputerCode>{math}`e=mc^2`</ComputerCode></Paragraph>
        <Paragraph>We can also use a <ComputerCode>{math}</ComputerCode> directive to define an equation block:</Paragraph>
        <ProgramListing><Paragraph>```{math}</Paragraph><Paragraph>:label: my-equation-identifier</Paragraph><Paragraph>w_{t+1} = (1 + r_{t+1})</Paragraph><Paragraph>s(w_t) + y_{t+1}</Paragraph><Paragraph>```</Paragraph></ProgramListing>
        
        <Equation id="my-equation"><TeX>w_{t+1} = (1 + r_{t+1})
s(w_t) + y_{t+1}</TeX></Equation>
        <Paragraph>Dollar math syntax may also be used to define block equations:</Paragraph>
        <ProgramListing><Paragraph>$$</Paragraph><Paragraph>\label{maxwell}</Paragraph><Paragraph>\begin{aligned}</Paragraph><Paragraph>\nabla \times \vec{e}+\frac{\partial \vec{b}}{\partial t}&amp;amp;=0 \\</Paragraph><Paragraph>\nabla \times \vec{h}-\vec{j}&amp;amp;=\vec{s}\_{e}</Paragraph><Paragraph>\end{aligned}</Paragraph><Paragraph>$$</Paragraph></ProgramListing>
        <Equation><TeX>
            \label{maxwell}
            \begin{aligned}
            \nabla \times \vec{e}+\frac{\partial \vec{b}}{\partial t}&amp;=0 \
            \nabla \times \vec{h}-\vec{j}&amp;=\vec{s}_{e}
            \end{aligned}
            </TeX>
        </Equation><Paragraph>The <ComputerCode>$$</ComputerCode> syntax also works as a one-liner. For example, the single line:</Paragraph>
        <Paragraph><ComputerCode>$$ \label{one-liner} Ax=b $$</ComputerCode></Paragraph>
        <Paragraph>will ultimately render as the formatted equation:</Paragraph>
        <Equation><TeX> \label{one-liner} Ax=b </TeX>
    </Equation></Session>
    <Session id="code">
        <Title>6 Code</Title>
        <Paragraph>We can mark up code blocks in usual markdown style:</Paragraph>
        <ProgramListing><Paragraph># A comment</Paragraph><Paragraph>def demo():</Paragraph><Paragraph>    """An example function.</Paragraph><Paragraph>    """</Paragraph><Paragraph>    a = 1</Paragraph><Paragraph>    return a</Paragraph><Paragraph></Paragraph><Paragraph>demo()</Paragraph></ProgramListing>
        <Paragraph>We can also refer inline, for example to the <ComputerCode>pandas</ComputerCode> package.</Paragraph>
    </Session>
    <Session id="quotations">
        <Title>7 Quotations</Title>
        <Paragraph>We can define quotations in markdown by prefix the quoted line or lines with a <ComputerCode>&gt;</ComputerCode> symbol at the start of the line:</Paragraph>
        <Paragraph>This works for sinle line quotes:</Paragraph>
        <Paragraph><ComputerCode>&gt; Here is a single line quote.</ComputerCode></Paragraph>
        <Quote><Paragraph>Here is a single line quote.</Paragraph></Quote>
        <Paragraph>and multi-line quotes:</Paragraph>
        <ProgramListing><Paragraph>&amp;gt; Here is the first line of the quote...</Paragraph><Paragraph>&amp;gt; ...and here is the second.</Paragraph><Paragraph>&amp;gt;</Paragraph><Paragraph>&amp;gt; And a final line.</Paragraph></ProgramListing>
        <Paragraph>The following is a quote and should be marked up as such:</Paragraph>
        <Quote><Paragraph>Here is the first line of the quoteâ¦
                â¦and here is the second.</Paragraph><Paragraph>And a final line.</Paragraph></Quote>
        <Paragraph>THe following is a quote that should be marked up as such, along with a typographically distinguished source reference component:</Paragraph>
        <Quote><Paragraph>Here is the first line of the quoteâ¦
                â¦and here is the second.</Paragraph><SourceReference>And a final line sourceâ¦</SourceReference></Quote>
    </Session>
    <Session id="trying-out-the-environment">
        <Title>8 Trying out the environment</Title>
        <Paragraph>You can try out the workflow in pre-configured environment using a <ComputerCode>.devcontainer</ComputerCode> in a VS Code environment running on your own computer, or in GitHub Codespaces.</Paragraph>
        <Paragraph>TO DO</Paragraph>
        <ProgramListing><Paragraph></Paragraph><Paragraph>```{exercise}</Paragraph><Paragraph>:label: my-exercise</Paragraph><Paragraph></Paragraph><Paragraph>Recall that $n!$ is read as "$n$ factorial" and defined as</Paragraph><Paragraph>$n! = n \times (n - 1) \times \cdots \times 2 \times 1$.</Paragraph><Paragraph></Paragraph><Paragraph>There are functions to compute this in various modules, but let's</Paragraph><Paragraph>write our own version as an exercise.</Paragraph><Paragraph></Paragraph><Paragraph>In particular, write a function `factorial` such that `factorial(n)` returns $n!$</Paragraph><Paragraph>for any positive integer $n$.</Paragraph><Paragraph>```</Paragraph><Paragraph></Paragraph><Paragraph>````{solution} my-exercise</Paragraph><Paragraph>:label: my-solution</Paragraph><Paragraph></Paragraph><Paragraph>Here's one solution.</Paragraph><Paragraph></Paragraph><Paragraph>```{code-block} python</Paragraph><Paragraph>def factorial(n):</Paragraph><Paragraph>    k = 1</Paragraph><Paragraph>    for i in range(n):</Paragraph><Paragraph>        k = k * (i + 1)</Paragraph><Paragraph>    return k</Paragraph><Paragraph></Paragraph><Paragraph>factorial(4)</Paragraph><Paragraph>```</Paragraph><Paragraph>````</Paragraph><Paragraph></Paragraph></ProgramListing>
        <Paragraph>More</Paragraph>
    </Session>
  </Unit>
</Item>
